import math

# Number of iterations/entries in the lookup table
ITERATIONS = 16
ANG_INPUT_WIDTH = 9
ANG_PROCESS_WIDTH = 20
ANG_TABLE_WIDTH = ANG_PROCESS_WIDTH - 1

# File to save the generated Verilog LUT module
filename = "../src/nextFrameEncoder/rotate/atan_lut.sv"

# Fixed-point scaling factor (e.g., for Q16.16 format)
shift = ANG_PROCESS_WIDTH - ANG_INPUT_WIDTH
scale_factor = 2**shift  # Change this as needed for different precision

if ANG_TABLE_WIDTH <= shift:
    raise ValueError("ANG_TABLE_WIDTH must be greater than shift")

# Generate arctangent values for 2^(-i)
atan_table = [math.degrees(math.atan(2**-i)) for i in range(ITERATIONS)]

# Convert arctangent values to fixed-point integers
scaled_atan_table = [int(atan * scale_factor) for atan in atan_table]

# Generate the Verilog code
with open(filename, 'w') as file:
    file.write("// This module contains the arctangent lookup table for the CORDIC algorithm.\n")
    file.write("// Generated by ../python/atan_lut.py\n\n")
    file.write(f"module atan_lut(output reg [{ANG_TABLE_WIDTH-1}:0] atan_table [0:{ITERATIONS-1}]);\n")
    file.write("    initial begin\n")
    for i, value in enumerate(scaled_atan_table):
        # print(i,value)
        file.write(f"        atan_table[{i}] = {ANG_TABLE_WIDTH}'d{value}; // atan(2^-{i}) * 2^{shift} ,{atan_table[i]} in degree\n")
    file.write("    end\n")
    file.write("endmodule\n")

print(f"Generated {filename} with {ITERATIONS} arctangent values.")
