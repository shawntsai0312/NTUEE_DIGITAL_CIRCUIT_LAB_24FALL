import math

# Number of iterations/entries in the lookup table
iterations = 16

# File to save the generated Verilog LUT module
filename = "../verilog/atan_lut.sv"

# Fixed-point scaling factor (e.g., for Q16.16 format)
scale_factor = 2**20  # Change this as needed for different precision

# Generate arctangent values for 2^(-i)
atan_table = [math.atan(2**-i) for i in range(iterations)]

# Convert arctangent values to fixed-point integers
scaled_atan_table = [int(atan * scale_factor) for atan in atan_table]

# Generate the Verilog code
with open(filename, 'w') as file:
    file.write("// This module contains the arctangent lookup table for the CORDIC algorithm.\n")
    file.write("// Generated by ../python/atan_lut.py\n\n")
    file.write("module atan_lut(output reg [19:0] atan_table [0:15]);\n")
    file.write("    initial begin\n")
    for i, value in enumerate(scaled_atan_table):
        # print(i,value)
        hex_value = f"{value & 0xFFFFF:05X}"  # Format as 20-bit hexadecimal
        file.write(f"        atan_table[{i}] = 20'h{hex_value}; // atan(2^-{i}) * 2^20\n")
    file.write("    end\n")
    file.write("endmodule\n")

print(f"Generated {filename} with {iterations} arctangent values.")
